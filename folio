#!/usr/bin/env python
import sys
import json
import datetime
import urllib.request

portfolio_file = "/home/kyb/Documents/portfolio.txt"
log_file = "/home/kyb/.local/logs/portfolio.log"
log_file_ext = "/home/kyb/.local/logs/folio.log"


####### no config below


# defaults, to be overriden by command line arguments
log_to_file = True
detailed_display = True

#returns (success: bool, error: str, pairame: str, price: float)
def currency_pair_price(fromc: str, toc: str) -> (bool, str, str, float):
    url = "https://api.cryptonator.com/api/ticker/"
    url += fromc
    url += "-"
    url += toc
    req = urllib.request.Request(url, data=None, headers={'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.47 Safari/537.36'})
    resp = urllib.request.urlopen(req)
    data = json.loads(resp.read().decode())
    if data['success'] == True:
        return (True, "", fromc+toc ,float(data['ticker']['price']))
    else:
        return (False, data['error'], fromc+toc, -1)

def load_portfolio(filename: str) -> [(str, float)]:
    ret = []
    with open(filename) as f:
        for line in f:
           elms = line.split(' ') 
           itm = (elms[0], float(elms[1]))
           ret.append(itm)
    return ret

#returns (currency, amount_in_currency, basecurrency, amount_in_basecurrency)
def get_prices(portfolio: [(str, float)], basecurrency: str) -> [(str, float, str, float)]:
    ret = []
    for itm in portfolio:
        if itm[0] == 'BTC':
            price = (itm[0], itm[1], itm[0], itm[1])
            ret.append(price)
            continue
        cpp = currency_pair_price(itm[0], basecurrency)
        if cpp[0] == True:
            price = (itm[0], itm[1], basecurrency, cpp[3] * itm[1])
            ret.append(price)
        else:
            pass
    return ret

def append_to_log(filename: str, line: str):
    if log_to_file == False:
        return
    with open(filename, 'a') as f:
        f.write(line)
        f.write('\n')

def main():
    folio = load_portfolio(portfolio_file)
    prices = get_prices(folio, "BTC")
    date = str(datetime.datetime.today())
    append_to_log(log_file_ext, "#" + date)   
    append_to_log(log_file_ext, "_" * 33)
    print("-" * 33)
    total_btc = float(0)
    for p in prices:
        line = '{:3} {:12}   {:3} {:10}'.format(p[0], p[1], p[2], round(p[3], 6))
        print(line)
        append_to_log(log_file_ext, line)
        total_btc += p[3]
    print("-" * 33)
    line = 'Total BTC: {:>10}'.format(round(total_btc, 8))
    print(line)
    append_to_log(log_file_ext, line)
    cpp = currency_pair_price("BTC", "EUR")
    if cpp[0] == True:
        total_eur = total_btc * cpp[3]
        line = 'Total EUR: {:>10}'.format(round(total_eur,2))
        print(line)
        append_to_log(log_file_ext, line)
    append_to_log(log_file_ext, "#")
    append_to_log(log_file_ext, "")

def print_totalworth():
    folio = load_portfolio(portfolio_file)
    prices = get_prices(folio, "BTC")
    date = str(datetime.datetime.today())
    total_btc = float(0)
    for p in prices:
        total_btc += p[3]
    logline = date + ": BTC " + str(total_btc) 
    append_to_log(log_file, logline)
    cpp = currency_pair_price("BTC", "EUR")
    if cpp[0] == True:
        total_eur = total_btc * cpp[3]
        line = '{}'.format(round(total_eur,2))
        logline = date + ": EUR " + str(total_eur) 
        append_to_log(log_file, logline)
        logline = ""
        append_to_log(log_file, logline)
        print(line)

if "-h" in sys.argv:
    print("use -n to disable logging. -s to display just total worth in euros")
    sys.exit(0)

if "-n" in sys.argv:
    log_to_file = False

if "-s" in sys.argv:
    detailed_display = False

if detailed_display:
    main()
else:
    print_totalworth()

